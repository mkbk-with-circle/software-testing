Faulty Code:
```python
def sort_age(lst):
    if len(lst) == 0:
        return []
    elif len(lst) == 1:
        return lst
    else:
        mid = len(lst) // 2
        lst1 = sort_age(lst[:mid])
        lst2 = sort_age(lst[mid:])
        
        result = []
        while lst1 and lst2:
            if lst1[0][1] < lst2[0][1]:
                result.append(lst1.pop())
            else:
                result.append(lst2.pop())
        result.extend(lst1)
        result.extend(lst2)
        
        return result
```

Task Description:
Given a list of people that is represented using a tuple (<gender>, <age>), function `sort_age` sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [("M", 23), ("F", 19), ("M", 30)]. The sorted list would look like [("M", 30), ("M", 23), ("F", 19)]. You may assume that no two members of the list of people are of the same age.


Test Results:
The provided code is producing incorrect results. For example:
- Running the function as follows `sort_age([("M", 35), ("F", 18), ("M", 23), ("F", 19), ("M", 30), ("M", 17)])` yields `[('M', 35), ('F', 18), ('M', 23), ('M', 30), ('M', 17), ('F', 19)]` instead of the expected `[('M', 35), ('M', 30), ('M', 23), ('F', 19), ('F', 18), ('M', 17)]`.
- Running the function as follows `sort_age([("F", 18), ("M", 23), ("F", 19), ("M", 30), ("M", 17)])` yields `[('M', 23), ('F', 18), ('M', 30), ('M', 17), ('F', 19)]` instead of the expected `[('M', 30), ('M', 23), ('F', 19), ('F', 18), ('M', 17)]`.
- Running the function as follows `sort_age([("F", 18), ("M", 23), ("F", 19), ("M", 30)])` yields `[('M', 23), ('F', 18), ('F', 19), ('M', 30)]` instead of the expected `[('M', 30), ('M', 23), ('F', 19), ('F', 18)]`.
- Running the function as follows `sort_age([("M", 23), ("F", 19), ("M", 30)])` yields `[('M', 30), ('F', 19), ('M', 23)]` instead of the expected `[('M', 30), ('M', 23), ('F', 19)]`.

Spectrum-based Fault Localization (SBFL) Techniques Results:
We have used SBFL techniques to identify potentially faulty lines. Here are the results of top-5 suspicious lines sorted in descending order of the score:
1. Line 7 `mid = len(lst) // 2`, Ochiai score: 0.269680
2. Line 8 `lst1 = sort_age(lst[:mid])`, Ochiai score: 0.269680
3. Line 9 `lst2 = sort_age(lst[mid:])`, Ochiai score: 0.269680
4. Line 11 `result = []`, Ochiai score: 0.269680
5. Line 12 `while lst1 and lst2:`, Ochiai score: 0.269680

Analyze the provided code and utilize task description, test results, and SBFL techniques results to help in identifying potentially faulty lines. Provide the results following this JSON template:
```json
{
  "faultLoc": [
    {
      "faultyLine": (indicating the line number of the suspicious code),
      "code": (displaying the actual code),
      "explanation": (step by step reasoning on why this location is considered potentially faulty)
    },
    ...
  ]
}
```
Ensure that the objects in the "faultLoc" array are sorted in descending order of suspicion.