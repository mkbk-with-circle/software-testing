Faulty Code:
```python
def sort_age(lst):
    while lst: # a is not []
        smallest = lst[0]
        for element in lst:
            if element[1] < smallest[1]:
                smallest = element
        lst.remove(smallest)
        sort.append(smallest)
```

Task Description:
Given a list of people that is represented using a tuple (<gender>, <age>), function `sort_age` sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [("M", 23), ("F", 19), ("M", 30)]. The sorted list would look like [("M", 30), ("M", 23), ("F", 19)]. You may assume that no two members of the list of people are of the same age.


Test Results:
The provided code is producing incorrect results. For example:
- Running the function as follows `sort_age([("F", 19)])` generate a `NameError: name 'sort' is not defined` in line 8 `sort.append(smallest)`.
- Running the function as follows `sort_age([("M", 35), ("F", 18), ("M", 23), ("F", 19), ("M", 30), ("M", 17)])` generate a `NameError: name 'sort' is not defined` in line 8 `sort.append(smallest)`.
- Running the function as follows `sort_age([("F", 18), ("M", 23), ("F", 19), ("M", 30), ("M", 17)])` generate a `NameError: name 'sort' is not defined` in line 8 `sort.append(smallest)`.
- Running the function as follows `sort_age([("F", 18), ("M", 23), ("F", 19), ("M", 30)])` generate a `NameError: name 'sort' is not defined` in line 8 `sort.append(smallest)`.
- Running the function as follows `sort_age([("M", 23), ("F", 19), ("M", 30)])` generate a `NameError: name 'sort' is not defined` in line 8 `sort.append(smallest)`.
- Running the function as follows `sort_age([])` yields `None` instead of the expected `[]`.

Spectrum-based Fault Localization (SBFL) Techniques Results:
We have used SBFL techniques to identify potentially faulty lines. Here are the results of top-5 suspicious lines sorted in descending order of the score:
1. Line 2 `while lst: # a is not []`, Ochiai score: 0.420084
2. Line 3 `smallest = lst[0]`, Ochiai score: 0.383482
3. Line 4 `for element in lst:`, Ochiai score: 0.383482
4. Line 5 `if element[1] < smallest[1]:`, Ochiai score: 0.383482
5. Line 7 `lst.remove(smallest)`, Ochiai score: 0.383482

Analyze the provided code and utilize task description, test results, and SBFL techniques results to help in identifying potentially faulty lines. Provide the results following this JSON template:
```json
{
  "faultLoc": [
    {
      "faultyLine": (indicating the line number of the suspicious code),
      "code": (displaying the actual code),
      "explanation": (step by step reasoning on why this location is considered potentially faulty)
    },
    ...
  ]
}
```
Ensure that the objects in the "faultLoc" array are sorted in descending order of suspicion.