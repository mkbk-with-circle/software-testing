Faulty Code:
```python
def sort_age(lst):
    agelist = [lst[0],]
    for i in range(1,len(lst)):
        if lst[i][1] > agelist[0][1]:
            agelist.insert(0, lst[i])
        elif lst[i][1] < agelist[len(agelist)-1][1]:
            agelist.insert(len(agelist), lst[i])
        else:
            for x in range(0,len(agelist)):
                if agelist[x][1]> lst[i][1] > agelist[x+1][1]:
                    agelist.insert(x+1, lst[i])
                    break
    return agelist
    
```

Task Description:
Given a list of people that is represented using a tuple (<gender>, <age>), function `sort_age` sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [("M", 23), ("F", 19), ("M", 30)]. The sorted list would look like [("M", 30), ("M", 23), ("F", 19)]. You may assume that no two members of the list of people are of the same age.


Test Results:
The provided code is producing incorrect results. For example:
- Running the function as follows `sort_age([])` generate an `IndexError: list index out of range` in line 2 `agelist = [lst[0],]`.

Spectrum-based Fault Localization (SBFL) Techniques Results:
We have used SBFL techniques to identify potentially faulty lines. Here are the results of top-5 suspicious lines sorted in descending order of the score:
1. Line 2 `agelist = [lst[0],]`, Ochiai score: 0.408248
2. Line 3 `for i in range(1,len(lst)):`, Ochiai score: 0.000000
3. Line 13 `return agelist`, Ochiai score: 0.000000
4. Line 4 `if lst[i][1] > agelist[0][1]:`, Ochiai score: 0.000000
5. Line 6 `elif lst[i][1] < agelist[len(agelist)-1][1]:`, Ochiai score: 0.000000

Analyze the provided code and utilize task description, test results, and SBFL techniques results to help in identifying potentially faulty lines. Provide the results following this JSON template:
```json
{
  "faultLoc": [
    {
      "faultyLine": (indicating the line number of the suspicious code),
      "code": (displaying the actual code),
      "explanation": (step by step reasoning on why this location is considered potentially faulty)
    },
    ...
  ]
}
```
Ensure that the objects in the "faultLoc" array are sorted in descending order of suspicion.