Faulty Code:
```python
def sort_age(lst):
    males = []
    females = []
    while len(lst) > 0:
        if lst[0][0] == "M":
            males = males + [lst[0],]
        elif lst[0][0] == "F":
            females = females + [lst[0],]
        lst = lst[1:]
    return merge(merge_sort(males), merge_sort(females))
    
def merge(left, right):
    results = []
    while left and right:
        if left[0][0] < right[0][0]:
            results.append(left.pop(0))
        else:
            results.append(right.pop(0))
    results.extend(left)
    results.extend(right)
    return results

def merge_sort(lst):
    if len(lst) < 2:
        return lst
    mid = len(lst) // 2
    left = merge_sort(lst[:mid])
    right = merge_sort(lst[mid:])
    return merge(left, right)
```

Task Description:
Given a list of people that is represented using a tuple (<gender>, <age>), function `sort_age` sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [("M", 23), ("F", 19), ("M", 30)]. The sorted list would look like [("M", 30), ("M", 23), ("F", 19)]. You may assume that no two members of the list of people are of the same age.


Test Results:
The provided code is producing incorrect results. For example:
- Running the function as follows `sort_age([("M", 35), ("F", 18), ("M", 23), ("F", 19), ("M", 30), ("M", 17)])` yields `[('F', 19), ('F', 18), ('M', 17), ('M', 30), ('M', 23), ('M', 35)]` instead of the expected `[('M', 35), ('M', 30), ('M', 23), ('F', 19), ('F', 18), ('M', 17)]`.
- Running the function as follows `sort_age([("F", 18), ("M", 23), ("F", 19), ("M", 30), ("M", 17)])` yields `[('F', 19), ('F', 18), ('M', 17), ('M', 30), ('M', 23)]` instead of the expected `[('M', 30), ('M', 23), ('F', 19), ('F', 18), ('M', 17)]`.
- Running the function as follows `sort_age([("F", 18), ("M", 23), ("F", 19), ("M", 30)])` yields `[('F', 19), ('F', 18), ('M', 30), ('M', 23)]` instead of the expected `[('M', 30), ('M', 23), ('F', 19), ('F', 18)]`.
- Running the function as follows `sort_age([("M", 23), ("F", 19), ("M", 30)])` yields `[('F', 19), ('M', 30), ('M', 23)]` instead of the expected `[('M', 30), ('M', 23), ('F', 19)]`.

Spectrum-based Fault Localization (SBFL) Techniques Results:
We have used SBFL techniques to identify potentially faulty lines. Here are the results of top-5 suspicious lines sorted in descending order of the score:
1. Line 6 `males = males + [lst[0],]`, Ochiai score: 0.213201
2. Line 15 `if left[0][0] < right[0][0]:`, Ochiai score: 0.213201
3. Line 18 `results.append(right.pop(0))`, Ochiai score: 0.213201
4. Line 26 `mid = len(lst) // 2`, Ochiai score: 0.213201
5. Line 27 `left = merge_sort(lst[:mid])`, Ochiai score: 0.213201

Analyze the provided code and utilize task description, test results, and SBFL techniques results to help in identifying potentially faulty lines. Provide the results following this JSON template:
```json
{
  "faultLoc": [
    {
      "faultyLine": (indicating the line number of the suspicious code),
      "code": (displaying the actual code),
      "explanation": (step by step reasoning on why this location is considered potentially faulty)
    },
    ...
  ]
}
```
Ensure that the objects in the "faultLoc" array are sorted in descending order of suspicion.