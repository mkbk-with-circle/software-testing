Faulty Code:
```python
def sort_age(lst):
    # Fill in your code here
    out = [lst[0],]
    for ele in lst[1:]:
        for indx in range(len(out)):
            if out[indx] < ele:
                out.insert(indx, ele)
                break
            elif indx == len(out) - 1:
                out.append(ele)
    return out
```

Task Description:
Given a list of people that is represented using a tuple (<gender>, <age>), function `sort_age` sorts the people and return a list in an order such that the older people are at the front of the list. An example of the list of people is [("M", 23), ("F", 19), ("M", 30)]. The sorted list would look like [("M", 30), ("M", 23), ("F", 19)]. You may assume that no two members of the list of people are of the same age.


Test Results:
The provided code is producing incorrect results. For example:
- Running the function as follows `sort_age([("M", 35), ("F", 18), ("M", 23), ("F", 19), ("M", 30), ("M", 17)])` yields `[('M', 35), ('M', 30), ('M', 23), ('M', 17), ('F', 19), ('F', 18)]` instead of the expected `[('M', 35), ('M', 30), ('M', 23), ('F', 19), ('F', 18), ('M', 17)]`.
- Running the function as follows `sort_age([("F", 18), ("M", 23), ("F", 19), ("M", 30), ("M", 17)])` yields `[('M', 30), ('M', 23), ('M', 17), ('F', 19), ('F', 18)]` instead of the expected `[('M', 30), ('M', 23), ('F', 19), ('F', 18), ('M', 17)]`.
- Running the function as follows `sort_age([])` generate an `IndexError: list index out of range` in line 3 `out = [lst[0],]`.

Spectrum-based Fault Localization (SBFL) Techniques Results:
We have used SBFL techniques to identify potentially faulty lines. Here are the results of top-5 suspicious lines sorted in descending order of the score:
1. Line 3 `out = [lst[0],]`, Ochiai score: 0.288675
2. Line 5 `for indx in range(len(out)):`, Ochiai score: 0.235702
3. Line 6 `if out[indx] < ele:`, Ochiai score: 0.235702
4. Line 7 `out.insert(indx, ele)`, Ochiai score: 0.235702
5. Line 9 `elif indx == len(out) - 1:`, Ochiai score: 0.235702

Analyze the provided code and utilize task description, test results, and SBFL techniques results to help in identifying potentially faulty lines. Provide the results following this JSON template:
```json
{
  "faultLoc": [
    {
      "faultyLine": (indicating the line number of the suspicious code),
      "code": (displaying the actual code),
      "explanation": (step by step reasoning on why this location is considered potentially faulty)
    },
    ...
  ]
}
```
Ensure that the objects in the "faultLoc" array are sorted in descending order of suspicion.