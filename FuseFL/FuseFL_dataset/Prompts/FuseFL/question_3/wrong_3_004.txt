Faulty Code:
```python
def remove_extras(lst):
    # your code here
    occurrences = ()
    new_lst = []
    for item in lst:
        if item not in occurrences:
            occurrences += (item,)
            new_list.append(item)
    return new_lst
```

Task Description:
The function `remove_extras` takes in a list and returns a new list with all repeated occurrences of any element removed. This new list should maintain the same order as the input list. For example, remove_extras([5, 2, 1, 2, 3]) returns the list [5, 2, 1, 3].

Test Results:
The provided code is producing incorrect results. For example:
- Running the function as follows `remove_extras([1, 1, 1, 2, 3])` generate a `NameError: name 'new_list' is not defined` in line 8 `new_list.append(item)`.
- Running the function as follows `remove_extras([1, 5, 1, 1, 3, 2])` generate a `NameError: name 'new_list' is not defined` in line 8 `new_list.append(item)`.
- Running the function as follows `remove_extras([3, 4, 5, 1, 3])` generate a `NameError: name 'new_list' is not defined` in line 8 `new_list.append(item)`.
- Running the function as follows `remove_extras([3, 4, 5, 1, 3])` generate a `NameError: name 'new_list' is not defined` in line 8 `new_list.append(item)`.
- Running the function as follows `remove_extras([3, 4, 5, 1, 3])` generate a `NameError: name 'new_list' is not defined` in line 8 `new_list.append(item)`.

Spectrum-based Fault Localization (SBFL) Techniques Results:
We have used SBFL techniques to identify potentially faulty lines. Here are the results of top-5 suspicious lines sorted in descending order of the score:
1. Line 6 `if item not in occurrences:`, Ochiai score: 0.408248
2. Line 7 `occurrences += (item,)`, Ochiai score: 0.408248
3. Line 8 `new_list.append(item)`, Ochiai score: 0.408248
4. Line 3 `occurrences = ()`, Ochiai score: 0.372678
5. Line 4 `new_lst = []`, Ochiai score: 0.372678

Analyze the provided code and utilize task description, test results, and SBFL techniques results to help in identifying potentially faulty lines. Provide the results following this JSON template:
```json
{
  "faultLoc": [
    {
      "faultyLine": (indicating the line number of the suspicious code),
      "code": (displaying the actual code),
      "explanation": (step by step reasoning on why this location is considered potentially faulty)
    },
    ...
  ]
}
```
Ensure that the objects in the "faultLoc" array are sorted in descending order of suspicion.