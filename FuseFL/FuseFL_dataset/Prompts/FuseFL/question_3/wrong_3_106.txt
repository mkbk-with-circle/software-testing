Faulty Code:
```python
def remove_extras(lst):
    # your code here
    result = (lst[0],)
    count = 0
    for item in lst[1:]:
        if item == result[count]:
            count += 1
        else:
            result +=(item,)
            count +=1
    return result
        
        
```

Task Description:
The function `remove_extras` takes in a list and returns a new list with all repeated occurrences of any element removed. This new list should maintain the same order as the input list. For example, remove_extras([5, 2, 1, 2, 3]) returns the list [5, 2, 1, 3].

Test Results:
The provided code is producing incorrect results. For example:
- Running the function as follows `remove_extras([1, 1, 1, 2, 3])` generate an `IndexError: tuple index out of range` in line 6 `if item == result[count]:`.
- Running the function as follows `remove_extras([1, 5, 1, 1, 3, 2])` generate an `IndexError: tuple index out of range` in line 6 `if item == result[count]:`.
- Running the function as follows `remove_extras([])` generate an `IndexError: list index out of range` in line 3 `result = (lst[0],)`.
- Running the function as follows `remove_extras([3, 4, 5, 1, 3])` yields `(3, 4, 5, 1, 3)` instead of the expected `[3, 4, 5, 1]`.
- Running the function as follows `remove_extras([3, 4, 5, 1, 3])` yields `(3, 4, 5, 1, 3)` instead of the expected `[3, 4, 5, 1]`.
- Running the function as follows `remove_extras([3, 4, 5, 1, 3])` yields `(3, 4, 5, 1, 3)` instead of the expected `[3, 4, 5, 1]`.

Spectrum-based Fault Localization (SBFL) Techniques Results:
We have used SBFL techniques to identify potentially faulty lines. Here are the results of top-5 suspicious lines sorted in descending order of the score:
1. Line 3 `result = (lst[0],)`, Ochiai score: 0.420084
2. Line 4 `count = 0`, Ochiai score: 0.383482
3. Line 5 `for item in lst[1:]:`, Ochiai score: 0.383482
4. Line 6 `if item == result[count]:`, Ochiai score: 0.383482
5. Line 9 `result +=(item,)`, Ochiai score: 0.342997

Analyze the provided code and utilize task description, test results, and SBFL techniques results to help in identifying potentially faulty lines. Provide the results following this JSON template:
```json
{
  "faultLoc": [
    {
      "faultyLine": (indicating the line number of the suspicious code),
      "code": (displaying the actual code),
      "explanation": (step by step reasoning on why this location is considered potentially faulty)
    },
    ...
  ]
}
```
Ensure that the objects in the "faultLoc" array are sorted in descending order of suspicion.