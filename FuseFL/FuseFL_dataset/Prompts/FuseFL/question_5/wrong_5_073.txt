Faulty Code:
```python
def top_k(lst, k):
    results = []
    counter = 0
    while counter < k:
        for i in range(-len(lst),0):
            if lst[i] == max(lst):
                results.append(lst.pop(i))
                counter += 1
        continue
    return results
```

Task Description:
The `top_k` function takes in a list of integers as the input and returns the greatest k number of values as a list, with its elements sorted in descending order. 

Test Results:
The provided code is producing incorrect results. For example:
- Running the function as follows `top_k([9, 9, 4, 9, 7, 9, 3, 1, 6], 5)` yields `[9, 9, 9, 9, 7, 6]` instead of the expected `[9, 9, 9, 9, 7]`.
- Running the function as follows `top_k([4, 5, 2, 3, 1, 6], 3)` yields `[6, 5, 4, 3]` instead of the expected `[6, 5, 4]`.

Spectrum-based Fault Localization (SBFL) Techniques Results:
We have used SBFL techniques to identify potentially faulty lines. Here are the results of top-5 suspicious lines sorted in descending order of the score:
1. Line 5 `for i in range(-len(lst),0):`, Ochiai score: 0.235702
2. Line 6 `if lst[i] == max(lst):`, Ochiai score: 0.235702
3. Line 9 `continue`, Ochiai score: 0.235702
4. Line 7 `results.append(lst.pop(i))`, Ochiai score: 0.235702
5. Line 8 `counter += 1`, Ochiai score: 0.235702

Analyze the provided code and utilize task description, test results, and SBFL techniques results to help in identifying potentially faulty lines. Provide the results following this JSON template:
```json
{
  "faultLoc": [
    {
      "faultyLine": (indicating the line number of the suspicious code),
      "code": (displaying the actual code),
      "explanation": (step by step reasoning on why this location is considered potentially faulty)
    },
    ...
  ]
}
```
Ensure that the objects in the "faultLoc" array are sorted in descending order of suspicion.